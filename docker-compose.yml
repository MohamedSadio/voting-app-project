services:

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: voting-redis
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: voting-db
    environment:
      POSTGRES_DB: voting_db
      POSTGRES_USER: voting_user
      POSTGRES_PASSWORD: SecurePassword123!
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voting_user -d voting_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

worker:
  build:
    context: ./worker
    dockerfile: Dockerfile
  container_name: voting-worker
  depends_on:
    db:
      condition: service_healthy
    redis:
      condition: service_healthy
  networks:
    - backend-network
  environment:
    REDIS_HOST: redis
    DB_HOST: db
    DB_NAME: voting_db
    DB_USER: voting_user
    DB_PASSWORD: SecurePassword123!
  restart: unless-stopped

  # Application de Vote (Python)
  vote:
    build:
      context: ./vote
      dockerfile: Dockerfile
    container_name: voting-app
    ports:
      - "${VOTE_PORT}:80"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    environment:
      REDIS_HOST: redis
    restart: unless-stopped

  # Application de Résultats (Node.js)
  result:
  build:
    context: ./result
    dockerfile: Dockerfile
  container_name: voting-result
  ports:
    - "5001:80"
  depends_on:
    db:
      condition: service_healthy
  networks:
    - frontend-network
    - backend-network
  environment:
    DB_HOST: db
    DB_NAME: voting_db
    DB_USER: voting_user
    DB_PASSWORD: SecurePassword123!
  restart: unless-stopped

# Définition des réseaux
networks:
  frontend-network:
    driver: bridge
    name: voting-frontend
  backend-network:
    driver: bridge
    name: voting-backend

# Définition des volumes
volumes:
  db-data:
    driver: local
    name: voting-db-data